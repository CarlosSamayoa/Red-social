{
  "info": {
    "name": "Red-O Authentication API",
    "description": "Colección completa de pruebas para el sistema de autenticación de Red-O",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Registro de Usuario",
      "item": [
        {
          "name": "1.1 Registro Exitoso",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user and token\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    ",
                  "    pm.environment.set(\"token\", responseJson.token);",
                  "    pm.environment.set(\"user_id\", responseJson.user.id);",
                  "});",
                  "",
                  "pm.test(\"User data is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user.email).to.eql(pm.environment.get(\"test_email\"));",
                  "    pm.expect(responseJson.user.username).to.eql(pm.environment.get(\"test_username\"));",
                  "    pm.expect(responseJson.user.firstName).to.eql(\"Test\");",
                  "    pm.expect(responseJson.user.lastName).to.eql(\"User\");",
                  "});",
                  "",
                  "pm.test(\"Token is valid JWT\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.token;",
                  "    pm.expect(token).to.match(/^eyJ[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"username\": \"{{test_username}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "1.2 Registro - Email Duplicado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Error message for duplicate email\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.eql(\"user_exists\");",
                  "    pm.expect(responseJson.message).to.include(\"ya está registrado\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"username\": \"nuevo_username\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "1.3 Registro - Validación de Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Password validation error\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.include(\"password\");",
                  "    pm.expect(responseJson.error).to.include(\"al menos\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"validacion@ejemplo.com\",\n  \"username\": \"validation_user\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"password\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Login de Usuario",
      "item": [
        {
          "name": "2.1 Login Exitoso con Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful with email\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "    pm.expect(responseJson.message).to.eql(\"Login exitoso\");",
                  "    ",
                  "    pm.environment.set(\"token\", responseJson.token);",
                  "});",
                  "",
                  "pm.test(\"User data matches registration\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user.email).to.eql(pm.environment.get(\"test_email\"));",
                  "    pm.expect(responseJson.user.username).to.eql(pm.environment.get(\"test_username\"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"identifier\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "2.2 Login - Credenciales Incorrectas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid credentials returns 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.eql(\"invalid_credentials\");",
                  "    pm.expect(responseJson.message).to.eql(\"Credenciales inválidas\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"identifier\": \"{{test_email}}\",\n  \"password\": \"password_incorrecto\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Información de Usuario",
      "item": [
        {
          "name": "3.1 Obtener Info Usuario Autenticado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get user info successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson).to.have.property('username');",
                  "    pm.expect(responseJson.id).to.eql(pm.environment.get(\"user_id\"));",
                  "});",
                  "",
                  "pm.test(\"User info is complete\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('firstName');",
                  "    pm.expect(responseJson).to.have.property('lastName');",
                  "    pm.expect(responseJson).to.have.property('created_at');",
                  "    pm.expect(responseJson).to.have.property('is_verified');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "3.2 Acceso Sin Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"No token returns 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.eql(\"missing_token\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Rutas Protegidas",
      "item": [
        {
          "name": "4.1 Feed (Con Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Protected route accessible with valid token\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/feed?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["feed"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "4.2 Feed (Sin Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Protected route blocks access without token\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/feed?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["feed"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001"
    }
  ]
}